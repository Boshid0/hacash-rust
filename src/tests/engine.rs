

fn _test_blocks() -> Vec<BlockV1> {
    let datas = vec![
        "010000000001005c57b130000000077790ba2fcdeaef4a4299d9b667135bac577ce204dee8388f1b97f7e64448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f30000000100000516fffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000002005c57b2e6001e231cb03f9938d54f04407797b8188f0375eb10f0bcb426dccae87dcadb564448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f300000001000007adfffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000003005c57b3f3000c0a2a3761fec7aa214975c1cce407b509a828d16dcf6d3bdb1f612a2466f54448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f3000000010000037afffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000004005c57b52d0015920ecbd8048128b9e27a26bd08b488050c78b89291d740889ed4d785f4104448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f30000000100000039fffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000005005c57b635000e9a58542cc77a2442721d839c23be67549940dbe3f0e84e18fb1630d90ae44448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f300000001000004ebfffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000006005c57b69b004fc675773657de765c1a355e9123624d7524bc3cdaaeea298a49c74583fe404448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f300000001000005b7fffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000007005c57b742001a0cad03d0ff1f8b6d8f7d9c1e35bbb1d648c50f16738b4a4029c9e4c5be794448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f3000000010000076ffffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000008005c57b825001a62c40e11085237574ab293c3056085f6071dff744c9883fd2c5b92f7f33e4448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f3000000010000013afffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
        "010000000009005c57b983003e7e42d2b866a066477894f9a14d788061265503ee144286c7d4927df3b3f44448ea1749d50416b41848e62edb30f8570153f80bd463f6b76de8d2948050f3000000010000041ffffffffe000000000c1fa1c032d90fd7afc54deb03941e87b4c59756f801012020202020202020202020202020202000",
    ];
    let mut blks = Vec::with_capacity(datas.len());
    for dt in datas {
        let dt = hex::decode(dt).unwrap();
        let mut blk = BlockV1::new();
        if let Err(e) = blk.parse(&dt, 0) {
            panic!("{}", e)
        }
        blks.push(blk);
    }
    blks
}







pub fn engine_test_1(engine: Arc<BlockEngine>) {

    engine.print_roller();

    let blks = _test_blocks();

    for blk in blks {

        let pkg = BlockPackage::new(Box::new(blk));
        if let Err(e) = engine.insert(Box::new(pkg)) {
            println!("{}", e);
        }

        println!("---------------------------------------");
        engine.print_roller();
    }



}